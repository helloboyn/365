class Solution {
public:

	// TIME COMPLEXITY:- O(N*M^2)
	// SPACE COMPLEXITY:- O(N*M)
    int numSubmatrixSumTarget(vector<vector<int>>& mat, int target)
    {
        int n = mat.size();
        int m = mat[0].size();
        
        // store prefix sum for each row
        for(int i=0;i<n;i++)
        {
            for(int j=1;j<m;j++)
                mat[i][j]+=mat[i][j-1];
        }
        
        int ans = 0;
        
        // map to store prefix sum of rows for a particular range of columns
        unordered_map<int,int> mp;
        
        for(int start=0;start<m;start++)
        {
            for(int end=start;end<m;end++)
            {
                // we are considering columns b/w {start,end}
                
                // clear previous entries
                mp.clear();
                
                mp[0]++;
                
                int sum = 0;
                
                // add sum for each row b/w the given range of columns
                
                for(int i=0;i<n;i++)
                {
                    // add sum for this row b/w {start,end}
                    
                    // curr stores sum of current row of matrix b/w given range of columns
                    int curr = mat[i][end];
                    
                    if(start>0)
                        curr-=mat[i][start-1];
                    
                    // sum of matrix elements upto now b/w given range
                    sum+=curr;
                    
                    // increment answers
                    ans+=mp[sum-target];
                    
                    mp[sum]++;
                }
                
            }
        }
        
        return ans;
        
    }
};
